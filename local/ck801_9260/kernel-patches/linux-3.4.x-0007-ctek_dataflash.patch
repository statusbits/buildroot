--- orig-linux-3.4.19/drivers/mtd/devices/mtd_dataflash.c	2012-11-17 13:16:56.000000000 -0800
+++ linux-3.4.19/drivers/mtd/devices/mtd_dataflash.c	2014-02-12 09:06:13.000000000 -0800
@@ -716,35 +716,38 @@
 	 * These newer chips also support 128-byte security registers (with
 	 * 64 bytes one-time-programmable) and software write-protection.
 	 */
-	{ "AT45DB011B",  0x1f2200, 512, 264, 9, SUP_POW2PS},
-	{ "at45db011d",  0x1f2200, 512, 256, 8, SUP_POW2PS | IS_POW2PS},
+	{ "AT45DB011B",  0x1f220000, 512, 264, 9, SUP_POW2PS},
+	{ "at45db011d",  0x1f220000, 512, 256, 8, SUP_POW2PS | IS_POW2PS},
 
-	{ "AT45DB021B",  0x1f2300, 1024, 264, 9, SUP_POW2PS},
-	{ "at45db021d",  0x1f2300, 1024, 256, 8, SUP_POW2PS | IS_POW2PS},
+	{ "AT45DB021B",  0x1f230000, 1024, 264, 9, SUP_POW2PS},
+	{ "at45db021d",  0x1f230000, 1024, 256, 8, SUP_POW2PS | IS_POW2PS},
 
-	{ "AT45DB041x",  0x1f2400, 2048, 264, 9, SUP_POW2PS},
-	{ "at45db041d",  0x1f2400, 2048, 256, 8, SUP_POW2PS | IS_POW2PS},
+	{ "AT45DB041x",  0x1f240000, 2048, 264, 9, SUP_POW2PS},
+	{ "at45db041d",  0x1f240000, 2048, 256, 8, SUP_POW2PS | IS_POW2PS},
 
-	{ "AT45DB081B",  0x1f2500, 4096, 264, 9, SUP_POW2PS},
-	{ "at45db081d",  0x1f2500, 4096, 256, 8, SUP_POW2PS | IS_POW2PS},
+	{ "AT45DB081B",  0x1f250000, 4096, 264, 9, SUP_POW2PS},
+	{ "at45db081d",  0x1f250000, 4096, 256, 8, SUP_POW2PS | IS_POW2PS},
 
-	{ "AT45DB161x",  0x1f2600, 4096, 528, 10, SUP_POW2PS},
-	{ "at45db161d",  0x1f2600, 4096, 512, 9, SUP_POW2PS | IS_POW2PS},
+	{ "AT45DB161x",  0x1f260000, 4096, 528, 10, SUP_POW2PS},
+	{ "at45db161d",  0x1f260000, 4096, 512, 9, SUP_POW2PS | IS_POW2PS},
 
-	{ "AT45DB321x",  0x1f2700, 8192, 528, 10, 0},		/* rev C */
+	{ "AT45DB321x",  0x1f270000, 8192, 528, 10, 0},		/* rev C */
 
-	{ "AT45DB321x",  0x1f2701, 8192, 528, 10, SUP_POW2PS},
-	{ "at45db321d",  0x1f2701, 8192, 512, 9, SUP_POW2PS | IS_POW2PS},
+	{ "AT45DB321x",  0x1f270100, 8192, 528, 10, SUP_POW2PS},
+	{ "at45db321d",  0x1f270100, 8192, 512, 9, SUP_POW2PS | IS_POW2PS},
 
-	{ "AT45DB642x",  0x1f2800, 8192, 1056, 11, SUP_POW2PS},
-	{ "at45db642d",  0x1f2800, 8192, 1024, 10, SUP_POW2PS | IS_POW2PS},
+	{ "AT45DB642x",  0x1f280000, 8192, 1056, 11, SUP_POW2PS},
+	{ "at45db642d",  0x1f280000, 8192, 1024, 10, SUP_POW2PS | IS_POW2PS},
+
+	{ "AT45DB641x",  0x1f280001, 32768, 264, 9, SUP_POW2PS},
+	{ "at45db641e",  0x1f280001, 32768, 256, 8, SUP_POW2PS | IS_POW2PS},
 };
 
 static struct flash_info *__devinit jedec_probe(struct spi_device *spi)
 {
 	int			tmp;
 	uint8_t			code = OP_READ_ID;
-	uint8_t			id[3];
+	uint8_t			id[4];
 	uint32_t		jedec;
 	struct flash_info	*info;
 	int status;
@@ -757,7 +760,7 @@
 	 * That's not an error; only rev C and newer chips handle it, and
 	 * only Atmel sells these chips.
 	 */
-	tmp = spi_write_then_read(spi, &code, 1, id, 3);
+	tmp = spi_write_then_read(spi, &code, 1, id, 4);
 	if (tmp < 0) {
 		pr_debug("%s: error %d reading JEDEC ID\n",
 			dev_name(&spi->dev), tmp);
@@ -771,6 +774,9 @@
 	jedec |= id[1];
 	jedec = jedec << 8;
 	jedec |= id[2];
+  jedec = jedec << 8;
+  if(id[1] == 0x28)
+	  jedec |= id[3];
 
 	for (tmp = 0, info = dataflash_data;
 			tmp < ARRAY_SIZE(dataflash_data);
